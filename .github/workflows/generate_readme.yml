name: 自动生成目录结构  # 工作流的名称，描述这是自动生成目录结构的任务

# 触发条件，设定在主分支推送时触发
on:
  push:
    branches:
      - main  # 只有推送到 main 分支时才会触发

jobs:
  # 工作任务的定义
  generate-readme:
    # 运行环境，这里选择 Ubuntu 最新版本的虚拟机
    runs-on: ubuntu-latest

    steps:
      # 步骤 1: 检出代码
      - name: 检出代码
        uses: actions/checkout@v2  # 这个步骤会将 Git 仓库中的代码拉取到虚拟机上

      # 步骤 2: 安装 Python
      - name: 安装 Python
        run: |
          sudo apt-get update  # 更新系统包
          sudo apt-get install python3 python3-pip  # 安装 Python 3 和 pip

      # 步骤 3: 生成目录结构并写入 README.md
      - name: 生成项目目录结构并更新 README.md
        run: |
          # 编写 Python 脚本来自动生成目录结构
          echo '  
          import os

          def generate_directory_structure(startpath):
              result = ""
              for root, dirs, files in os.walk(startpath):
                  # 计算当前目录的深度
                  depth = root.replace(startpath, "").count(os.sep)
                  indent = " " * 4 * depth
                  result += f"{indent}- {os.path.basename(root)}/\n"
                  for file in files:
                      result += f"{indent}    - {file}\n"
              return result
          
          if __name__ == "__main__":
              project_dir = "."  # 项目根目录
              structure = generate_directory_structure(project_dir)
          
              with open("README.md", "a") as readme_file:
                  readme_file.write("\n## 项目目录结构\n")
                  readme_file.write("以下是本项目的目录结构：\n\n")
                  readme_file.write("```text\n")
                  readme_file.write(structure)
                  readme_file.write("```\n")
          ' > generate_directory_structure.py  # 将 Python 脚本写入临时文件

          # 运行 Python 脚本，生成目录结构并追加到 README.md
          python3 generate_directory_structure.py

      # 步骤 4: 提交更新后的 README.md
      - name: 提交更新的 README.md
        run: |
          git add README.md  # 添加修改后的 README.md 文件到暂存区
          git commit -m "更新 README.md，自动生成项目目录结构"  # 提交更改
          git push  # 推送更新到远程仓库
